// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  password   String?
  username   String?
  likedPosts Post[]
  comments   Comment[]
  pfpUrl     String?
  likes      Like[]
}

model Post {
  id           Int       @id @default(autoincrement())
  createdBy    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  postName     String
  description  String?
  likes        Like[]
  comments     Comment[]
  postImageUrl String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime?
}

model Like {
  userLiked User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  postLiked Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int

  @@id([userId, postId])
}

model Comment {
  id             Int      @id @default(autoincrement())
  commentOwner   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int
  commentContent String
  postCommented  Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId         Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
}
